{{template "base" .}}

{{define "title"}}Edit Trips{{end}}

{{define "css"}}
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/css/tom-select.css" rel="stylesheet">

<style>
    .ts-wrapper .option .name {
        display: block;
    }
    .ts-wrapper .option .aliases {
        font-size: 12px;
        display: block;
        color: #a0a0a0;
    }
</style>
{{end}}

{{define "content"}}
    <div class="container">
        {{ $v := index .Data "mileage-log" }}
        <div class="row">
            <div class="col">
                <h1 class="mt-3">Mileage Log: {{$v.Name}} - Update Trips</h1>

                <div class="row">
                    <div class="col">
                        <p><b>Vehicle:</b> {{ $v.Vehicle.Name }}</p>
                        <p><b>Year/Month:</b> {{ $v.Year }}/{{ $v.Month }}</p>
                        <p><b>Odometer Start:</b> {{ $v.StartOdometer }}</p>
                        <p><b>Odometer End:</b> {{ $v.EndOdometer }}</p>
                    </div>
                    <div class="col-6"></div>
                    <div class="col">
                        <a href="/mileage-logs/{{$v.ID}}"><button type="button" class="btn btn-primary">
                            Edit Mileage Log Details
                        </button></a>
                    </div>
                </div>
            </div>
        </div>

        {{ if $v }}
        <div class="row mt-2">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <h4 class="card-title">Trips</h4>
                        </div>
                        <div class="col-8"></div>
                        <div class="col"></div>
                    </div>
                    <div class="row">
                        <div class="col">
                            {{template "tripForm" .}}
                        </div>
                    </div>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <table class="table table-sm table-striped">
                                <thead>
                                    {{template "tripHeader" .}}
                                </thead>
                                <tbody id="trip-list">
                                    {{range $v.Trips}}
                                    {{template "tripRow" .}}
                                    {{ end }}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {{ end }}
    </div>
{{end}}

{{define "js"}}
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/js/tom-select.complete.min.js"></script>
<script>
    // multi-rider selection
    new TomSelect('#riders',{
        hideSelected: false,
        duplicates: true,
        options: [
            {{ index .Data "member-options" }}

        ],
        labelField: 'name',
        searchField: ['name', 'aliases'],
        valueField: 'id',
        render: {
            option: function(data, escape) {
                return '<div>' +
					'<span class="name">' + escape(data.name) + '</span>' +
					'<span class="aliases">AKA: ' + escape(data.aliases) + '</span>' +
				'</div>';
            }
        },
    })
</script>

<script>
    function generateFullOdometerValue() {
        // Get the prefix and last three digits.
        const startMileageFull = document.getElementById('start-mileage').value;
        const endThreeDigits = document.getElementById('end-mileage-input').value;
        
        // Reconstruct the full odometer value.
        const endMileageFull = Math.floor(startMileageFull / 1000) * 1000 + parseInt(endThreeDigits);
        // TODO: add checks for situations when the mileage rolls over from the thousands

        // Add the new value to the form as a hidden field before submission.
        const newHiddenInput = document.createElement('input');
        newHiddenInput.type = 'hidden';
        newHiddenInput.name = 'end-mileage';
        newHiddenInput.value = endMileageFull;
        document.querySelector('form').appendChild(newHiddenInput);

        // Basic validation: ensure the new value is not less than the previous one.
        if (endMileageFull < parseInt(startMileageFull)) {
            alert("New odometer reading cannot be less than the previous one.");
            // Prevent form submission if validation fails.
            return false; 
        }
    }
</script>
{{end}}